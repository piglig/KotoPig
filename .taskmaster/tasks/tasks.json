{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "项目环境搭建与核心技术集成",
        "description": "设置项目仓库，初始化前端（React + MUI + Framer Motion）和后端/数据库（Supabase）开发环境。",
        "details": "创建新的代码仓库。使用 Create React App 或 Vite 初始化前端项目，集成 Material UI (MUI) 和 Framer Motion。配置 Supabase 项目，获取 API 密钥和 URL，并在前端项目中进行基本配置。",
        "testStrategy": "验证前端应用能成功启动，MUI 组件能正常渲染，Supabase 客户端配置正确，可以连接到 Supabase 项目。",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "数据库模式设计与实现",
        "description": "根据 PRD 定义的核心数据模型（User, Word, Review, Badge, Stats, Flashcard），在 Supabase (PostgreSQL) 中创建相应的表结构。",
        "details": "在 Supabase 控制台或使用迁移工具创建 `users`, `words`, `reviews`, `badges`, `stats`, `flashcards` 表。定义字段类型、主键、外键和索引，确保符合数据模型描述。例如，`words` 表包含 `word_id`, `kana`, `kanji`, `meaning`, `pos`, `forms` (JSONB), `audio`, `example_sentences` (JSONB) 等字段。",
        "testStrategy": "验证数据库中已成功创建所有必需的表，并且字段、类型和关系设置正确。",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "用户认证系统实现",
        "description": "使用 Supabase Auth 实现用户注册、登录、登出功能。",
        "details": "在前端集成 Supabase Auth 客户端。创建注册和登录页面 UI。实现用户输入验证。调用 Supabase Auth API (`signUp`, `signInWithPassword`, `signOut`) 处理用户身份验证流程。处理认证状态变化，例如使用 React Context 或状态管理库管理用户会话。",
        "testStrategy": "测试用户能够成功注册新账号、使用注册的账号登录、以及正常登出。验证认证状态在应用中正确反映。",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "基础词汇数据加载与服务",
        "description": "实现加载和提供基础词汇数据的功能，初期可使用静态数据或直接从 Supabase `words` 表读取。",
        "details": "如果使用静态数据，将词汇数据导入前端或一个简单的本地 JSON 文件。如果从 Supabase 读取，创建 Supabase Edge Function 或简单的后端 API (如果使用 Flask) 来查询 `words` 表。实现分页或按需加载机制以处理大量数据。",
        "testStrategy": "验证应用能够成功加载并访问词汇数据。如果使用 API，测试 API 端点能正确返回词汇列表。",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "词汇检索与基础展示 UI",
        "description": "构建词汇检索页面 UI，实现模糊搜索功能，并展示基础词汇信息（假名、汉字、释义）。",
        "details": "使用 MUI 组件构建搜索框和结果列表 UI。实现前端搜索逻辑，根据用户输入过滤词汇数据（如果数据量小且在前端）。如果数据量大，调用后端/Supabase Edge Function 实现全文模糊搜索（假名/汉字/罗马音/英文）。在结果列表中展示词汇的 `kana`, `kanji`, `meaning`。",
        "testStrategy": "测试搜索框输入不同类型的查询（假名、汉字、罗马音、英文）时，能够返回相关的词汇结果。验证结果列表正确显示基础信息。",
        "priority": "high",
        "dependencies": [
          1,
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "增强词汇展示：活用、发音与例句",
        "description": "在词汇详情或展示组件中，添加动词五段活用图、TTS 发音和示例句子高亮显示。",
        "details": "根据词汇数据中的 `pos` (词性) 和 `forms` (活用信息)，动态生成动词活用表格 UI，支持鼠标悬浮解释。集成 Web Speech API 或预缓存的音频文件实现 TTS 发音功能，支持慢速和重复播放。解析 `example_sentences` 数据，高亮显示当前词汇。",
        "testStrategy": "测试动词活用图能正确显示并交互。测试发音功能正常工作，支持慢速和重复。测试示例句子中目标词汇被正确高亮。",
        "priority": "high",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "实现“添加到我的词表”功能",
        "description": "在词汇展示界面添加“添加到我的词表”按钮，实现将词汇关联到当前用户的功能。",
        "details": "在词汇详情组件中添加按钮。点击按钮时，调用 Supabase Edge Function 或后端 API，在 `flashcards` 表中为当前用户和该词汇创建一条记录，可以设置默认 `status` 或 `tag` (例如 '生词本')。确保用户已登录才能执行此操作。",
        "testStrategy": "测试登录用户点击按钮后，词汇成功添加到其个人词表（通过查看数据库或用户界面确认）。测试未登录用户点击时给出提示或跳转登录。",
        "priority": "medium",
        "dependencies": [
          3,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "闪卡模式核心 UI 与动画实现",
        "description": "构建全新的闪卡练习模式 UI，使用 MUI 和 Framer Motion 实现卡片切换动画和基本导航。",
        "details": "设计闪卡组件，正面显示词汇，反面显示释义、例句、发音等。使用 Framer Motion 实现卡片翻转和切换动画。实现左右滑动或按钮点击切换下一张/上一张卡片的基本导航逻辑。从词汇数据中加载用于闪卡的词汇列表。",
        "testStrategy": "测试闪卡界面能正确显示词汇卡片。测试卡片翻转动画流畅。测试能够通过手势或按钮切换到下一张/上一张卡片。",
        "priority": "high",
        "dependencies": [
          1,
          4,
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "每日打卡与连续打卡天数追踪",
        "description": "实现用户每日打卡功能，记录打卡日期，并在 `stats` 表中更新连续打卡天数 (streak)。",
        "details": "创建打卡接口 (Supabase Edge Function 或后端 API)。前端在用户访问或执行特定操作时触发打卡检查。检查用户当天是否已打卡，如果未打卡，记录当前日期，并根据前一天的打卡记录更新 `users` 表中的 `streak` 字段。在 UI 中显示今日打卡状态和连续打卡天数。",
        "testStrategy": "测试用户每天首次访问时能成功打卡，连续打卡天数正确增加。测试非首次访问时打卡状态正确显示。测试中断打卡后连续天数重置。",
        "priority": "medium",
        "dependencies": [
          3,
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "基础徽章系统实现与展示",
        "description": "实现徽章数据的管理和用户已解锁徽章的展示。",
        "details": "在 `badges` 表中预设徽章数据（标题、解锁条件、图标）。在用户完成特定行为（如连续打卡达到天数、学习新词达到数量）时，通过 Supabase Edge Function 或后端逻辑检查是否满足徽章解锁条件。如果满足，在 `users` 表的 `badges` 字段（JSONB 数组）中添加徽章 ID。创建 UI 组件展示用户已获得的徽章列表。",
        "testStrategy": "测试预设的徽章数据能被加载。测试当用户满足解锁条件时，对应的徽章能被正确标记为已解锁并显示在用户界面中。",
        "priority": "low",
        "dependencies": [
          3,
          2
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-10T03:55:00.917Z",
      "updated": "2025-07-10T03:55:00.917Z",
      "description": "Tasks for master context"
    }
  }
}